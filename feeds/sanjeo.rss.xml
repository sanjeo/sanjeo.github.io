<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sanjeo's Blog</title><link>http://www.sanjeo.com/</link><description></description><atom:link href="http://www.sanjeo.com/feeds%5Csanjeo.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 02 Mar 2015 22:50:00 +0800</lastBuildDate><item><title>OpenStack解析 - Paste Deploy</title><link>http://www.sanjeo.com/pages/2015/03/02/openstack-paste-deploy-interpretation/</link><description>&lt;p&gt;OpenStack中采用Paste Deployment来部署WSGI应用，这里进行一下简要分析。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;1. Python WSGI简介&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Python中的WSGI (Web Server Gateway Interface), 是Python应用程序（或者框架、套件）与服务器之间的一种接口，其定义了两者进行通信的接口规范。服务器端和应用端都必须遵循这套规范。当一个应用程序是按照WSGI规范开发的，那么它可以在任意遵循该规范的服务器上运行。那这是怎样一套接口呢？在wsgi规范里，一个web服务流程如下图所示：
&lt;img alt="WSGI Workflow" src="https://github.com/sanjeo/sanjeo.github.io/raw/master/images/wsgi_workflow.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;显而易见，wsgi把web组件分成三个部分：wsgi server (服务器端)，wsgi middleware (中间件)，wsgi application (应用端)。&lt;/p&gt;
&lt;p&gt;应用端只需要实现一个接受两个参数的，含有__call__方法并返回一个可遍历的含有零个或多个string结果的Python对象即可。当然传入参数的名字可以任意取，但习惯把第一个参数命名为“environ”，第二个为“start_response”。
中间件是一个两头都要兼顾的部件。在上面所示的服务栈中，一个中间件对于位于其顶部的中间件或者应用充当着服务器，而对于其下面的中间件或者服务器，它又扮演着应用端的角色。所以，中间件需要同时实现服务器端与应用端的规范。&lt;/p&gt;
&lt;p&gt;服务器端也不复杂，对于每个http请求，调用一次应用端“注册”的那个协议规定应用端必须要实现的对象，然后返回相应的响应消息。所有的处理细节都在应用或者中间件中完成。这样一次应用端与服务器的通信就完成了，即完成了一次对用户请求的处理。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;2. Paste Deploy配置文件&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Paste Depoly是一个用于发现和配置WSGI application和server的系统。对于WSGI application, 用户通过提供一个单独的函数（loadapp），用于从配置文件或者python egg中加载WSGI application。因为WSGI application提供了唯一的单独的简单的访问入口，所以application无需暴露application的内部的实现细节。&lt;/p&gt;
&lt;p&gt;从一个paste deploy的配置文件(config.ini)来进行简单的分析:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[composite:main]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:Paste#urlmap&lt;/span&gt;
&lt;span class="na"&gt;/&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;home&lt;/span&gt;
&lt;span class="na"&gt;/blog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;blog&lt;/span&gt;
&lt;span class="na"&gt;/wiki&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;wiki&lt;/span&gt;
&lt;span class="na"&gt;/cms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;config:cms.ini&lt;/span&gt;

&lt;span class="k"&gt;[app:home]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:Paste#static&lt;/span&gt;
&lt;span class="na"&gt;document_root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(here)s/htdocs&lt;/span&gt;

&lt;span class="k"&gt;[filter-app:blog]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:Authentication#auth&lt;/span&gt;
&lt;span class="na"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;blogapp&lt;/span&gt;
&lt;span class="na"&gt;roles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;admin&lt;/span&gt;
&lt;span class="na"&gt;htpasswd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/me/users.htpasswd&lt;/span&gt;

&lt;span class="k"&gt;[app:blogapp]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:BlogApp&lt;/span&gt;
&lt;span class="na"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;sqlite:/home/me/blog.db&lt;/span&gt;

&lt;span class="k"&gt;[app:wiki]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;call:mywiki.main:application&lt;/span&gt;
&lt;span class="na"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;sqlite:/home/me/wiki.db&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每个配置文件中有不同的section，Paste Deploy只关心诸如带有[app:main]和[filter:error] (':'之后的是section的名称，之前是类型)前缀的section，其他的则会被忽略。以下将一个个分析这些不同类型的section：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[composite:main]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:Paste#urlmap&lt;/span&gt;
&lt;span class="na"&gt;/&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;home&lt;/span&gt;
&lt;span class="na"&gt;/blog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;blog&lt;/span&gt;
&lt;span class="na"&gt;/cms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;config:cms.ini&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首先是名为main的composite section。 这部分意味着把请求分发给其他应用来处理。use = egg:Paste#urlmap 表示一种简单的映射关系，利用Paste包下的urlmap应用，把路径不同的请求进行映射，如后面的/ , /blog 以及 /cms等路径.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[app:home]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:Paste#static&lt;/span&gt;
&lt;span class="na"&gt;document_root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(here)s/htdocs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来是名为home的app section。这里用到了一种新的映射方式static，进行静态映射，通过配置document_root的参数，指向静态文件目录。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[filter-app:blog]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:Authentication#auth&lt;/span&gt;
&lt;span class="na"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;blogapp&lt;/span&gt;
&lt;span class="na"&gt;roles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;admin&lt;/span&gt;
&lt;span class="na"&gt;htpasswd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/me/users.htpasswd&lt;/span&gt;

&lt;span class="k"&gt;[app:blogapp]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:BlogApp&lt;/span&gt;
&lt;span class="na"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;sqlite:/home/me/blog.db&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;filter-app代表了对blog应用进行过滤，这里没有具体说明，但是use表明使用了Authenication包下的auth应用，next指向下一个应用，roles和htpasswd都是配置选项，为一个key-value键值对。下面的blogapp指向了egg封装的BlogApp应用，并配置了数据库目录。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[app:wiki]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;call:mywiki.main:application&lt;/span&gt;
&lt;span class="na"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;sqlite:/home/me/wiki.db&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后，和上面配置的唯一区别就是use选项配置不再是egg封装的应用，直接通过call命令调用mywiki,main模块下application应用。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;3. Paste Deploy基本用法&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Paste Deploy加载WSGI应用的方式十分简单，主要是使用paste.deploy.loadapp函数，其基本用法如下：
from paste.deploy import loadapp 
wsgi_app = loadapp('config:/path/to/config.ini')&lt;/p&gt;
&lt;p&gt;url有config以及egg两种模式。其中config模式的文件格式如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[section_name]&lt;/span&gt;
&lt;span class="na"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;value&lt;/span&gt;
&lt;span class="na"&gt;another key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;a long value&lt;/span&gt;
&lt;span class="s"&gt;    that extends over multiple lines&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中注释行，开头为&lt;code&gt;#&lt;/code&gt;或者&lt;code&gt;；&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;egg模式，通过setuptools打包python源文件，类似java jar的格式；下面详细介绍config文件模式：&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Applications&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;在单个文件中可以定义多个应用，但是如果只有一个应用，则必须把它放在一个section中。
可以通过以下代码来部署应用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[app:myapp]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;config:another_config_file.ini#app_name&lt;/span&gt;

&lt;span class="c1"&gt;# or any URI:&lt;/span&gt;
&lt;span class="k"&gt;[app:myotherapp]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:MyApp&lt;/span&gt;

&lt;span class="c1"&gt;# or a callable from a module:&lt;/span&gt;
&lt;span class="k"&gt;[app:mythirdapp]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;call:my.project:myapplication&lt;/span&gt;

&lt;span class="c1"&gt;# or even another section:&lt;/span&gt;
&lt;span class="k"&gt;[app:mylastapp]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;myotherapp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第一种指向同目录下另一个config.ini中定义的app应用
第二种指向egg封装的应用
第三种指向一个模块下的应用
第四中指向本config.ini文件中的另一个app&lt;/p&gt;
&lt;p&gt;还有一种特别的app的应用部署方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[app:myapp]&lt;/span&gt;
&lt;span class="na"&gt;paste.app_factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;myapp.modulename:app_factory&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;paste.app_factory是一种协议格式，除了app_factory外还有composite_facory, fliter_factory, fliter_app_factory, server_factory, server_runner等。后面跟上myapp.modulename模块下的app_factroy类，不同协议其app_factory也不一样，后面会详细介绍如何定义每一个factories.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Composite Applications&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;复合应用，是那些行为像应用，但是由其他应用组成。如通过类似上文url的方式提供映射，到不同的应用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[composite:main]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:Paste#urlmap&lt;/span&gt;
&lt;span class="na"&gt;/&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;mainapp&lt;/span&gt;
&lt;span class="na"&gt;/files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;staticapp&lt;/span&gt;

&lt;span class="k"&gt;[app:mainapp]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:MyApp&lt;/span&gt;

&lt;span class="k"&gt;[app:staticapp]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:Paste#static&lt;/span&gt;
&lt;span class="na"&gt;document_root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/path/to/docroot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;strong&gt;Filter Composition&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;有三种方法进行filter，第一种是fliter-with,第二种是filter-app,第三种是pipeline,多说一句，openstack用的最多的是pipeline。&lt;/p&gt;
&lt;p&gt;第一种，通过fliter-with指向下一个fliter应用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[app:main]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:MyEgg&lt;/span&gt;
&lt;span class="na"&gt;filter-with&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;printdebug&lt;/span&gt;

&lt;span class="k"&gt;[filter:printdebug]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:Paste#printdebug&lt;/span&gt;
&lt;span class="c1"&gt;# and you could have another filter-with here, and so on...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二种，通过next配置指向下一个filter应用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[filter-app:blog]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:Authentication#auth&lt;/span&gt;
&lt;span class="na"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;blogapp&lt;/span&gt;
&lt;span class="na"&gt;roles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;admin&lt;/span&gt;
&lt;span class="na"&gt;htpasswd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/me/users.htpasswd&lt;/span&gt;

&lt;span class="k"&gt;[app:blogapp]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:BlogApp&lt;/span&gt;
&lt;span class="na"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;sqlite:/home/me/blog.db&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第三种，pipeline依次列出filter即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[pipeline:main]&lt;/span&gt;
&lt;span class="na"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;filter1 egg:FilterEgg#filter2 filter3 app&lt;/span&gt;

&lt;span class="k"&gt;[filter:filter1]&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;strong&gt;Defining Factories&lt;/strong&gt;&lt;/h4&gt;
&lt;h6&gt;&lt;strong&gt;app_factory&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;app_factory为可调用对象，接受参数（global,**local_conf）,返回application对象。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;app_factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;local_conf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wsgi_app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;global_config传入的是字典参数，local_conf传入的是key-value参数。&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;composite_factory&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;composite_factory为可调用对象，接受参数（loader,global_config,**local_conf）, loader有几个方法, get_app用于获取wsgi_app, get_filter用于加载filter, 返回application对象。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;composite_factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;global_config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;local_conf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wsgi_app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如下使用方案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pipeline_factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;global_config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
    &lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;space&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;separated&lt;/span&gt; &lt;span class="s-Atom"&gt;list&lt;/span&gt; &lt;span class="s-Atom"&gt;of&lt;/span&gt; &lt;span class="s-Atom"&gt;filter&lt;/span&gt; &lt;span class="s-Atom"&gt;and&lt;/span&gt; &lt;span class="s-Atom"&gt;app&lt;/span&gt; &lt;span class="nn"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s-Atom"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="s-Atom"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s-Atom"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s-Atom"&gt;for&lt;/span&gt; &lt;span class="s-Atom"&gt;n&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="s-Atom"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;[:-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="s-Atom"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="s-Atom"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;apply&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="s-Atom"&gt;reverse&lt;/span&gt; &lt;span class="s-Atom"&gt;order&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
    &lt;span class="s-Atom"&gt;for&lt;/span&gt; &lt;span class="s-Atom"&gt;filter&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="nn"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s-Atom"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s-Atom"&gt;return&lt;/span&gt; &lt;span class="s-Atom"&gt;app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置文件如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[composite:main]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;pipeline_factory_uri&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:Paste#printdebug session myapp&lt;/span&gt;

&lt;span class="k"&gt;[filter:session]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:Paste#session&lt;/span&gt;
&lt;span class="na"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;memory&lt;/span&gt;

&lt;span class="k"&gt;[app:myapp]&lt;/span&gt;
&lt;span class="na"&gt;use&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;egg:MyApp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将数据读取传入，将filter printdebug,session读入并付给filter,读取app为pipeline参数的最后一个myapp,翻转filter先运行session(myapp)，再运行egg:Paste#printdebug(myapp)。&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;fliter_factory&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;filter_factory: 可调用对象，接受参数(global_config, **local_conf)，返回filter对象。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;auth_filter_factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_conf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req_usernames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;separated&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;usernames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;req_usernames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req_usernames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;AuthFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req_usernames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;AuthFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req_usernames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
        &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;req_usernames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req_usernames&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;REMOTE_USER&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;req_usernames&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt; &lt;span class="n"&gt;Forbidden&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;forbidden&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;定义了AuthFilter对象实现请求变量'REMOTE_USER'下的变量内容和req_usernames是否一致，filter(app)调用唯一对象app，再里面再做处理并返回信息，通过__call__把类像函数一样调用。&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;fliter_app_factory&lt;/strong&gt;&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;AuthFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;global_conf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req_usernames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;除了参数包括app，返回对象为WSGI application外，其他不变。&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;server_factory&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;接受一个参数 wsgi_app，返回serve&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;server_factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_conf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sanjeo</dc:creator><pubDate>Mon, 02 Mar 2015 22:50:00 +0800</pubDate><guid>tag:www.sanjeo.com,2015-03-02:pages/2015/03/02/openstack-paste-deploy-interpretation/</guid><category>paste.deploy</category></item><item><title>OpenStack Neutron DVR-架构概览</title><link>http://www.sanjeo.com/pages/2014/12/05/openstack-neutron-dvr/</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sanjeo</dc:creator><pubDate>Fri, 05 Dec 2014 20:00:00 +0800</pubDate><guid>tag:www.sanjeo.com,2014-12-05:pages/2014/12/05/openstack-neutron-dvr/</guid><category>neutron</category></item><item><title>shell脚本的并发控制</title><link>http://www.sanjeo.com/pages/2014/12/04/shell-concurrency-control/</link><description>&lt;h3&gt;&lt;strong&gt;shell脚本的并发&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Default模式下，shell命令是阻塞执行的，可以通过其后添加&lt;code&gt;&amp;amp;&lt;/code&gt;让这条命令异步执行，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行这条命令后，并不会阻塞10秒，而是立即返回。&lt;/p&gt;
&lt;p&gt;如果将这种方法用在while循环中，则可以实现多进程并行处理。例如一下&lt;code&gt;test1.sh&lt;/code&gt;文件为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;read &lt;/span&gt;line
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;command &lt;/span&gt;1
&lt;span class="o"&gt;}&lt;/span&gt; &amp;amp;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nb"&gt;command &lt;/span&gt;2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样的话&lt;code&gt;command 1&lt;/code&gt;就可以并行执行了,其实质是将每条&lt;code&gt;command 1&lt;/code&gt;命令作为后台进程在执行，这样主进程就不用等待前面的命令执行完毕之后才开始执行接下来的命令。通过执行&lt;code&gt;ls -l | test1.sh&lt;/code&gt;可以看到并发的进程数量。&lt;/p&gt;
&lt;p&gt;但是这样带来一个问题: 如果在&lt;code&gt;while&lt;/code&gt;循环外面的&lt;code&gt;command 2&lt;/code&gt;需要用到循环内部执行得到的结果，那么像&lt;code&gt;test1.sh&lt;/code&gt;的这种写法就不work了。我们可以对其做简单修改，达到上述目的，如&lt;code&gt;test2.sh&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;read &lt;/span&gt;line
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;command &lt;/span&gt;1
&lt;span class="o"&gt;}&lt;/span&gt; &amp;amp;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="nb"&gt;wait&lt;/span&gt;

&lt;span class="nb"&gt;command &lt;/span&gt;2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码是将所有的&lt;code&gt;command 1&lt;/code&gt;在后台并行执行，等到循环里面的命令都结束之后才执行接下来的&lt;code&gt;command 2&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;shell脚本的并发控制&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;有时为了避免并发进程数过多，导致机器卡死，需要限制并发的数量。以下代码实现了该功能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;read &lt;/span&gt;line
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;joblist&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt; -p&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="k"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;joblist&lt;/span&gt;&lt;span class="p"&gt;[*]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt; 20 &lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
      sleep 1
      &lt;span class="nv"&gt;joblist&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;jobs&lt;/span&gt; -p&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="k"&gt;  &lt;/span&gt;sleep 10 &amp;amp;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上方法通过控制后台任务数来控制并发进程数目在20个以内。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sanjeo</dc:creator><pubDate>Wed, 03 Dec 2014 12:50:00 +0800</pubDate><guid>tag:www.sanjeo.com,2014-12-04:pages/2014/12/04/shell-concurrency-control/</guid><category>shell</category></item><item><title>如何清理OpenStack Cinder中的僵尸卷</title><link>http://www.sanjeo.com/pages/2014/12/03/clean-cinder-zombie-volume/</link><description>&lt;p&gt;在Cinder中删除volume的时候，经常会碰到&lt;code&gt;cinder delete&lt;/code&gt;操作执行后volume的状态为&lt;code&gt;error_deleting&lt;/code&gt;。如果再尝试去删除这个volume的时候，Cinder会提示volume的状态必须为&lt;code&gt;available&lt;/code&gt;或者&lt;code&gt;error&lt;/code&gt;才可以删除。此时，该volume便成了僵尸卷。&lt;/p&gt;
&lt;p&gt;在确保Cinder的backend没有问题的前提下，我的解决方法是：&lt;/p&gt;
&lt;p&gt;1.在cinder的数据库中重置&lt;code&gt;error_deleting&lt;/code&gt;状态的volume为&lt;code&gt;available&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
cinder list | grep error_deleting &amp;gt; volumes.list

cat volumes.list | awk -F &lt;span class="s2"&gt;&amp;quot;|&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt; | &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;read &lt;/span&gt;line
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt; &lt;/span&gt;sh update_volumes.sh &lt;span class="nv"&gt;$line&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$line&lt;/span&gt;
sleep 1
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中 update_volumes.sh用来reset每个僵尸卷的状态：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
mysql cinder -e &lt;span class="s2"&gt;&amp;quot;update volumes set status=&amp;#39;available&amp;#39;,mountpoint=NULL,instance_uuid=NULL,attach_status=&amp;#39;detached&amp;#39;,attach_time=NULL where id=&amp;#39;$1&amp;#39;;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.重新执行&lt;code&gt;cinder delete&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
cinder list| grep &lt;span class="s1"&gt;&amp;#39;available&amp;#39;&lt;/span&gt;  &amp;gt; volume.list

cat volume.list| awk -F &lt;span class="s2"&gt;&amp;quot;|&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt; | &lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;read &lt;/span&gt;line
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;  &lt;/span&gt;cinder delete  &lt;span class="nv"&gt;$line&lt;/span&gt;
  sleep 1

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$line&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果后端出现问题导致volume无法删除，对应的解决方案可以为：&lt;/p&gt;
&lt;p&gt;1.类似上面的&lt;code&gt;update_volume.sh&lt;/code&gt;，将cinder数据库&lt;code&gt;volumes&lt;/code&gt;中僵尸卷的状态更新为&lt;code&gt;deleted&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;2.更新cinder数据库&lt;code&gt;quota_usages&lt;/code&gt;表中的&lt;code&gt;in_use&lt;/code&gt;项的数减少相应的删除的僵尸卷的数目。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sanjeo</dc:creator><pubDate>Wed, 03 Dec 2014 19:52:00 +0800</pubDate><guid>tag:www.sanjeo.com,2014-12-03:pages/2014/12/03/clean-cinder-zombie-volume/</guid><category>cinder</category></item><item><title>欲删rbd，必先umap</title><link>http://www.sanjeo.com/pages/2014/11/03/umap-before-remove-rbd-img/</link><description>&lt;h3&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;今天在使用&lt;code&gt;ceph&lt;/code&gt;作为&lt;code&gt;nova&lt;/code&gt;和&lt;code&gt;cinder&lt;/code&gt;的backend的情况下，用&lt;code&gt;Rally&lt;/code&gt;测试cinder的&lt;code&gt;create-and-attach-volume&lt;/code&gt;时发现，测试结束后仍有两个instance(deleting状态)和volume(detaching状态)没有删除掉：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;bctrl&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keystone_admin&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;cinder&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tenants&lt;/span&gt;
 &lt;span class="o"&gt;+--------------------------------------+-----------+-------------------------+------+-------------+----------+--------------------------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="n"&gt;ID&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="n"&gt;Status&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="n"&gt;Display&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Size&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Volume&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Bootable&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="n"&gt;Attached&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;              &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;+--------------------------------------+-----------+-------------------------+------+-------------+----------+--------------------------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;bbc350f&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;404e-4986&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;915&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;db7b1cfda403&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;detaching&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;rally_volume_hbpqrdslsu&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="n"&gt;None&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="nb"&gt;false&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;de63a0c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;580&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4404&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="n"&gt;a3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;764&lt;/span&gt;&lt;span class="n"&gt;c72c2ca70&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b92f845b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5156&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;46e5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a144&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;52f&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="n"&gt;b890aef&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;detaching&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;rally_volume_wetlxxuvfu&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="n"&gt;None&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="nb"&gt;false&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mf"&gt;1f&lt;/span&gt;&lt;span class="mi"&gt;611&lt;/span&gt;&lt;span class="n"&gt;d59&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bae7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;416&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a0a6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b75dd9152c4a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;+--------------------------------------+-----------+-------------------------+------+-------------+----------+--------------------------------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用rbd命令去删除后端对应的volume则得到以下错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;bctrl&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keystone_admin&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;rbd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;bvolume&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="n"&gt;volume&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;bbc350f&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;404e-4986&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;915&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;db7b1cfda403&lt;/span&gt;
&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;01.239065&lt;/span&gt; &lt;span class="mf"&gt;7f6540f9e760&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;librbd&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;watchers&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;removing&lt;/span&gt;
&lt;span class="n"&gt;Removing&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nl"&gt;rbd:&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;still&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;watchers&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;means&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;still&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;crashed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Try&lt;/span&gt; &lt;span class="n"&gt;again&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="n"&gt;closing&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;unmapping&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;waiting&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;crashed&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是因为nova中的instance还在使用对应的volume并且没有detach成功。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;解决办法&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先查看rbd中该volume的对应信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;bctrl&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keystone_admin&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;rbd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;bvolume&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="n"&gt;volume&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;bbc350f&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;404e-4986&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;915&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;db7b1cfda403&lt;/span&gt;
&lt;span class="n"&gt;rbd&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;volume&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;bbc350f&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;404e-4986&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;915&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;db7b1cfda403&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;10240&lt;/span&gt; &lt;span class="n"&gt;MB&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;2560&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;
&lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt; &lt;span class="n"&gt;kB&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nl"&gt;block_name_prefix:&lt;/span&gt; &lt;span class="n"&gt;rbd_data&lt;/span&gt;&lt;span class="mf"&gt;.2523&lt;/span&gt;&lt;span class="n"&gt;b30fe8f54&lt;/span&gt;
&lt;span class="nl"&gt;format:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nl"&gt;features:&lt;/span&gt; &lt;span class="n"&gt;layering&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后使用rbd的listwatchers命令来查看谁在使用该image：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;bctrl&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keystone_admin&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;rados&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;bvolume&lt;/span&gt; &lt;span class="n"&gt;listwatchers&lt;/span&gt; &lt;span class="n"&gt;rbd_header&lt;/span&gt;&lt;span class="mf"&gt;.2523&lt;/span&gt;&lt;span class="n"&gt;b30fe8f54&lt;/span&gt;
&lt;span class="n"&gt;watcher&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;192.101.6.111&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2053818&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="mf"&gt;.152300&lt;/span&gt; &lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启对应的节点，即&lt;code&gt;192.101.6.111&lt;/code&gt;，然后重新删除对应的volume或者instance即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sanjeo</dc:creator><pubDate>Mon, 03 Nov 2014 22:50:00 +0800</pubDate><guid>tag:www.sanjeo.com,2014-11-03:pages/2014/11/03/umap-before-remove-rbd-img/</guid><category>ceph</category><category>cinder</category><category>nova</category></item><item><title>在Apache HTTPD中运行OpenStack keystone</title><link>http://www.sanjeo.com/pages/2014/09/24/configure-keystone-in-httpd/</link><description>&lt;p&gt;之前看过一篇关于Openstack keystone的性能测试的&lt;a href="http://prajnagarden.com/openstack/2014/05/06/keystone-tunning-01/"&gt;文章&lt;/a&gt;，其中提到将Keystone运行在Apache容器下，性能可以提升将近四倍。于是，今天学习了下如何将已有的keystone配置到Apache HTTPD下运行，主要包括以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;关闭正在运行的keystone服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="n"&gt;openstack&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keystone&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;
&lt;span class="n"&gt;chkconfig&lt;/span&gt; &lt;span class="n"&gt;openstack&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keystone&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立到keystone的wsgi进程的&lt;code&gt;cgi-bin&lt;/code&gt;链接&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cgi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;keystone&lt;/span&gt;
&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;keystone&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;keystone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cgi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;keystone&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;keystone&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;keystone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cgi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;keystone&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置keystone在Apache中的Virtual Hosts 及监听端口&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;root&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;bctrl&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;# cat /etc/httpd/conf.d/keystone.conf

WSGIDaemonProcess keystone user=keystone group=keystone  processes=10 threads=30

NameVirtualHost *:5000
Listen 5000
&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="err"&gt;*:5000&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
ServerName keystone-main
WSGIScriptAlias /  /var/www/cgi-bin/keystone/main
WSGIProcessGroup keystone

# SSL Config
#SSLEngine on
#SSLCertificateFile /etc/ssl/certs/server.crt
#SSLCertificateKeyFile /etc/ssl/private/server.key

ErrorLog /var/log/keystone/httpd-main-error.log
LogLevel debug
CustomLog /var/log/keystone/httpd-main-access.log common
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;

NameVirtualHost *:35357
Listen 35357
&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="err"&gt;*:35357&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
ServerName keystone-admin
WSGIScriptAlias /  /var/www/cgi-bin/keystone/admin
WSGIProcessGroup keystone
# SSL Config
#SSLEngine on
#SSLCertificateFile /etc/ssl/certs/server.crt
#SSLCertificateKeyFile /etc/ssl/private/server.key

ErrorLog /var/log/keystone/httpd-admin-error.log
LogLevel debug
CustomLog /var/log/keystone/httpd-admin-access.log common
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置keystone&lt;/p&gt;
&lt;p&gt;a、根据httpd设置的监听端口来修改&lt;code&gt;/etc/keystone/keystone.conf&lt;/code&gt;中的&lt;code&gt;public_port&lt;/code&gt;以及&lt;code&gt;admin_port&lt;/code&gt;,    由于本文监听的端口与原服务的监听端口一致，所以无需修改；&lt;/p&gt;
&lt;p&gt;b、根据&lt;code&gt;/etc/httpd/conf.d/keystone.conf&lt;/code&gt;中设置的两个VirtualHost的&lt;code&gt;WSGIScriptAlias&lt;/code&gt;来修改&lt;code&gt;/etc/keystone/keystone.conf&lt;/code&gt;中的&lt;code&gt;public_endpoint&lt;/code&gt;以及&lt;code&gt;admin_endpoint&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;c、根据&lt;code&gt;WSGIDaemonProcess&lt;/code&gt;中的&lt;code&gt;user&lt;/code&gt;和&lt;code&gt;group&lt;/code&gt;来设置keystone的log目录&lt;code&gt;/var/log/keystone/&lt;/code&gt;以及配置文件目录&lt;code&gt;/etc/keystone/&lt;/code&gt;的用户名：组&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;chown&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;keystone&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;keystone&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;keystone&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;chown&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;keystone&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;keystone&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;keystone&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启或者重新加载httpd服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="n"&gt;httpd&lt;/span&gt; &lt;span class="n"&gt;resatrt&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="n"&gt;httpd&lt;/span&gt; &lt;span class="n"&gt;reload&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试下keystone是否允许正常。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;bctrl&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;keystone&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;

&lt;span class="o"&gt;+----------------------------------+------------+---------+----------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="n"&gt;id&lt;/span&gt;                &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;name&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="n"&gt;email&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+----------------------------------+------------+---------+----------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;d504d814b9aa46deace95604d9580290&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="n"&gt;admin&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="n"&gt;True&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;51319&lt;/span&gt;&lt;span class="n"&gt;d3731144336b74c522066ff0b0c&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ceilometer&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="n"&gt;True&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ceilometer&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;2076&lt;/span&gt;&lt;span class="n"&gt;b0f0432c488db071a3d8555bddc2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="n"&gt;cinder&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="n"&gt;True&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="n"&gt;cinder&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a77fbe8993f446f09df2c013dc26785c&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="n"&gt;glance&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="n"&gt;True&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="n"&gt;glance&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;40410&lt;/span&gt;&lt;span class="n"&gt;d22224140b89966fcf4387ddb8f&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;neutron&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="n"&gt;True&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;neutron&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;f2a9344739824c7490605a2354fd53a3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;nova&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="n"&gt;True&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;nova&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+----------------------------------+------------+---------+----------------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sanjeo</dc:creator><pubDate>Wed, 24 Sep 2014 22:30:00 +0800</pubDate><guid>tag:www.sanjeo.com,2014-09-24:pages/2014/09/24/configure-keystone-in-httpd/</guid><category>keystone</category></item><item><title>利用已有的RBD images快速重建Glance镜像</title><link>http://www.sanjeo.com/pages/2014/08/21/use-existing-rbd-images-to-rebuild-images/</link><description>&lt;h3&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;最近在调整和升级公司的OpenStack时遇到一些硬软件的问题，简单记录学习和解决的过程，以备后用。
我们的OpenStack环境包括两个相对独立的setup，采用共同的Ceph集群(rbd)作为Glance以及Cinder的存储后端。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：在一个没有HA的OpenStack部署环境中，如果Glance节点(包括它的数据库)硬盘挂掉了，如何在重新部署完
的glance中快速恢复镜像呢？&lt;/p&gt;
&lt;p&gt;最初我们的glance使用的是本地file system而不是rbd作为backend，所以在转移或者重建image时只能老老实实的重新上传到glance。现在既然使用了ceph，还那么干岂不是太土包子了？&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;我们只需将glance的backend设置成已有的rbd pool,那么接下来要做的只是在glance中建立镜像的相关信息(注册镜像ID以及metadata等)，而不需要创建一个新的镜像，所以自然省时省力。&lt;/p&gt;
&lt;p&gt;1.首先，通过rbd的client查看一下对应image的信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;bctrl&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keystone_admin&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;rbd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;bimage&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="mi"&gt;730&lt;/span&gt;&lt;span class="n"&gt;d0191&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3e06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4099&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c2a852269166&lt;/span&gt;
&lt;span class="n"&gt;rbd&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;730&lt;/span&gt;&lt;span class="n"&gt;d0191&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3e06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4099&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c2a852269166&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="mi"&gt;5120&lt;/span&gt; &lt;span class="n"&gt;kB&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;
&lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8192&lt;/span&gt; &lt;span class="n"&gt;kB&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nl"&gt;block_name_prefix:&lt;/span&gt; &lt;span class="n"&gt;rbd_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c22371f56a20&lt;/span&gt;
&lt;span class="nl"&gt;format:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nl"&gt;features:&lt;/span&gt; &lt;span class="n"&gt;layering&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.通过glance的&lt;code&gt;image-create&lt;/code&gt;命令中的&lt;code&gt;location&lt;/code&gt;参数指定image源的rbd地址来创建新的image：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;bctrl&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keystone_admin&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;glance&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;cirros&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rbd&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;rbd&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;disk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="n"&gt;ovf&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="n"&gt;rbd&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//730d0191-3e06-4099-85a1-c2a852269166&lt;/span&gt;
 &lt;span class="o"&gt;+------------------+--------------------------------------+&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Property&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;                                &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;+------------------+--------------------------------------+&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;checksum&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;                                 &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;container_format&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ovf&lt;/span&gt;                                  &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="n"&gt;T10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;deleted&lt;/span&gt;          &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;                                &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;deleted_at&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;                                 &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;disk_format&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;                                  &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;               &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;138&lt;/span&gt;&lt;span class="n"&gt;b56d8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;cef&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;40e9&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;d1d&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a1c22ae8ad87&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;is_public&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;                                &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;min_disk&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;                                    &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;min_ram&lt;/span&gt;          &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;                                    &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;cirros&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rbd&lt;/span&gt;                           &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;68353&lt;/span&gt;&lt;span class="n"&gt;b3df0894f2288c25d6706fe1935&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;protected&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;                                &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;5242880&lt;/span&gt;                              &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;           &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;active&lt;/span&gt;                               &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;updated_at&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="n"&gt;T10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;virtual_size&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;                                 &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="o"&gt;+------------------+--------------------------------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PS. 以上&lt;code&gt;--location&lt;/code&gt;的url有两种方式来指定：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; &lt;code&gt;rbd://{$pool-name}/{$image-name}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt; &lt;code&gt;rbd://{$image-name}&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;方法&lt;strong&gt;(2)&lt;/strong&gt;中glance会默认使用&lt;code&gt;glance-api.conf&lt;/code&gt;中指定的&lt;code&gt;rbd-pool&lt;/code&gt;来进行查找。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sanjeo</dc:creator><pubDate>Tue, 26 Aug 2014 22:50:00 +0800</pubDate><guid>tag:www.sanjeo.com,2014-08-21:pages/2014/08/21/use-existing-rbd-images-to-rebuild-images/</guid><category>glance</category><category>ceph</category></item></channel></rss>